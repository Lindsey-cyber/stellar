// Contract addresses and configuration for Stellar Testnet
export const NETWORK_CONFIG = {
  network: 'testnet',
  horizonUrl: 'https://horizon-testnet.stellar.org',
  sorobanRpc: 'https://soroban-testnet.stellar.org',
  networkPassphrase: 'Test SDF Network ; September 2015'
} as const

// Token Contract Addresses
export const TOKEN_CONTRACTS = {
  XLM: 'CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC',
  BLND: 'CAG5ROT3YECQJ7UOQLRE2XDP2IBYUGNFZYX3344IT2WYIO4DDEDWSMJY',
  USDC: 'CCTS5IK6Y6G7KBSX6ELCK7WXKCBJZ3JDCKBHDXWA3XO2CA5VDXOMALCB',
  wETH: 'CCLTXT3BUCI5URJUQ3BL3CGFDZRQWA6NV3SMPJHWNCI7MQEZTVG5ZOOB',
  wBTC: 'CDTM4O4VBFCVHZPTRWYAGC6I34NGR2I4IYQWUUA77NGW3HSQA3YBK7MN',
  RWA_UST: 'CCA2BWGKIB7TU5VWHZSRDSGQPSIROSHGE4RUXOW4S6RMGU4DK5EXO7BN'
} as const

// Blend Protocol Contracts
export const BLEND_CONTRACTS = {
  cometFactory: 'CDHW2ESS3AEYMG7AYFWEDOMGV3ECHPU4VQ76B25BEVXLHC26GSRORKG6',
  comet: 'CCDMXQSG3RQXMCOR3EWRT7JDU4UVRISHJVWZBBRNPDQF6LVMP5XRQE5L',
  oracleMock: 'CAPB3GI4A6QEMIOTPZQS6BNF6DVF33HONAGPO2Z4WG47XVUYMDF2ZAYL',
  emitter: 'CBZ657CAUZDSA2Z2Z22AFTAXAIENXTBKIIXX33YUAY74LYOHRRH22RBZ',
  poolFactoryV2: 'CABW2BEODTXSJDXXR52LTEOX2ME6YJDEIJY2A3UYE2LTNFNOSZWVDP7V',
  backstopV2: 'CBZUX663L2O2JD7QXVYTSL55RPWOP2RBIFFAFKET3FTB3K3MPENG3M2J',
  testnetV2Pool: 'CD24SABPPEFJHQ4D5UEVAV52SUYHDERKKBNWX2PUGVPSJ6NCOEJVBLTQ'
} as const

// Tranche Contract
export const TRANCHE_CONTRACT = {
  address: 'CAIUMAVGQUDLA5EMTCC4GY5EF64VMZOFPSS6EFZZKLFWMAB56ZPE5QRP'
} as const

// Contract Hashes
export const CONTRACT_HASHES = {
  comet: '8abc28913035c07411ed5d134e6bfeab4723d97ddd4d1a22a0605d35c94d1a36',
  cometFactory: 'bf7adb09076853eb3aa569278754111d86e161e35e7dc6a984ecde2b9d6700ae',
  oracleMock: '723523383575ffad246408a1d5674cbf97356b27fab5357c6e6d2081096b3cb2',
  poolFactoryV2: '31328050548831f63d2b72e37bcfd0bb7371b7907135755dbe09ed434d755ca9',
  backstopV2: 'c1f4502a757e25c611f5a159bc1ab0eef64085adac6c68123dca66e87faffbc2',
  lendingPoolV2: 'a41fc53d6753b6c04eb15b021c55052366a4c8e0e21bc72700f461264ec1350e',
  emitter: '438a5528cff17ede6fe515f095c43c5f15727af17d006971485e52462e7e7b89'
} as const

// Helper function to get all contract addresses
export const getAllContracts = () => ({
  ...TOKEN_CONTRACTS,
  ...BLEND_CONTRACTS
})

// Helper to get contract by name
export const getContractAddress = (name: keyof typeof TOKEN_CONTRACTS | keyof typeof BLEND_CONTRACTS): string => {
  return (TOKEN_CONTRACTS as any)[name] || (BLEND_CONTRACTS as any)[name] || ''
}
